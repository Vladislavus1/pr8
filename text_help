from app import app, login_manager
from flask import render_template, request, redirect,  url_for, flash
from app.db.db_model import session
from app.db.groups import Group
from app.db.students import Student
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import login_user, login_required, logout_user, current_user
from app.admin_service import admin_required

def commit_new_item(item):
    session.add(item)
    session.commit()
    session.close()

def get_list_groups():
    groups = session.query(Group).all()
    groups = [i.name for i in groups]
    return groups

def get_list_of_all_students_in_group_by_id(group_id):
    list_of_objects = session.query(Student).where(Student.group == group_id).all()
    list_of_names = [student.name for student in list_of_objects]
    return list_of_names


def get_group_id_by_name(group_name):
    gr_id = session.query(Group).where(Group.name == group_name).first().id
    return gr_id


@app.route("/")
@app.route("/main")
def index():
    return render_template("base.html")


@app.route("/group", methods=["GET"])
def group():
    groups = get_list_groups()
    return render_template("group.html", groups=groups)


@app.route("/add_new_group", methods=["POST"])
# @admin_required
def add_new_group():
    name = request.form["group"]

    new_group = Group(name=name)

    commit_new_item(new_group)
    return redirect("group")

@app.route("/student/<gr_name>")
def student(gr_name):
    gr_id = get_group_id_by_name(gr_name)
    students = get_list_of_all_students_in_group_by_id(gr_id)

    return render_template("student.html", students=students, groups=students)

@app.route("/add_student", methods=["POST", "GET"])
def add_student():
    if request.method == "POST":
        group = request.form["arg"]
        return redirect(f"/students/{group}")
    return render_template("add_student.html")


@app.route("/add_new_user", methods=["POST"])
# @admin_required
def add_new_user():
    username = request.form["username"]
    password = generate_password_hash(request.form["password"])
    name = request.form["name"]
    surname = request.form["surname"]
    age = int(request.form["age"])
    adress = request.form["address"]
    group_name = request.form["group_name"]
    group_id = int(get_group_id_by_name(group_name))

    user = session.query(Student).where(Student.username == username).first()

    if user:
        return redirect(url_for("signup"))


    new_user = Student(username=username, password=password, name=name, surname=surname, age=age, adress=adress, id_group=group_id)
    print(new_user)
    commit_new_item(new_user)
    return redirect("/main")


@app.route("/login", methods=["POST", "GET"])
def login():
    if request.method == "POST":
        username = request.form["username"]
        password = request.form["password"]
        remember = True if request.form.get("remember") else False

        user = session.query(Student).where(Student.username == username).first()
        is_password_correct = False

        if user:
            print(user.password)
            print(generate_password_hash(password))
            is_password_correct = check_password_hash(user.password, password)
        print(is_password_correct)



        if not user or not is_password_correct:
            flash("Try again and check your login details")
            return redirect(url_for("login"))

        login_user(user)
        return render_template("base.html")
    return render_template("login.html")

@app.route("/log_out")
@login_required
def logout():
    logout_user()
    return redirect("/")

@app.route("/admin")
# @admin_required
def admin():
    group_list = get_list_groups()
    return render_template("admin.html", group_list=group_list)

@app.route("/profile")
@login_required
def profile():
    user_name = current_user.name
    group_id = current_user.group
    group_list = get_list_of_all_students_in_group_by_id(group_id)
    return render_template("profile.html", user_name=user_name, group_list=group_list)


@login_manager.user_loader
def load_user(user):
    return session.query(Student).get(int(user))